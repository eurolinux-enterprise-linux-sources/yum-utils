diff -up yum-utils-1.1.30/package-cleanup.py.orig yum-utils-1.1.30/package-cleanup.py
--- yum-utils-1.1.30/package-cleanup.py.orig	2018-02-16 13:13:13.961667553 +0100
+++ yum-utils-1.1.30/package-cleanup.py	2018-02-16 13:13:32.469584211 +0100
@@ -202,18 +202,45 @@ class PackageCleanup(YumUtilBase):
 
     def _remove_old_dupes(self):
         """add older duplicate pkgs to be removed in the transaction"""
-        dupedict = self._find_installed_duplicates()
 
-        removedupes = []
+        # Find dupes
+        dupedict = self._find_installed_duplicates()
+        removedupes = set()
         for (name,dupelists) in dupedict.items():
             for dupelist in dupelists:
                 dupelist.sort()
                 for lowpo in dupelist[0:-1]:
-                    removedupes.append(lowpo)
+                    removedupes.add(lowpo)
 
+        # Exclude any such dupes that would pull other installed packages into
+        # the removal transaction (to prevent us from accidentally removing a
+        # huge part of a working system) by performing a dry transaction(s)
+        # first.
+        excluded = {}
+        while True:
+            for po in removedupes:
+                self.remove(po)
+            changed = False
+            for txmbr in self.tsInfo.getMembers():
+                requiredby = self._checkRemove(txmbr)
+                if requiredby:
+                    removedupes.remove(txmbr.po)
+                    excluded[txmbr.po] = requiredby
+                    # Do another round, to cover any transitive deps within
+                    # removedupes, for example: if foo requires bar requires
+                    # baz and removedupes contains bar and baz, then
+                    # _checkRemove(baz) won't return bar.
+                    changed = True
+            del self.tsInfo
+            if not changed:
+                break
+
+        # Mark the dupes for removal
         for po in removedupes:
             self.remove(po)
 
+        return excluded
+
 
     def _should_show_leaf(self, po, leaf_regex, exclude_devel, exclude_bin):
         """
@@ -401,7 +428,13 @@ class PackageCleanup(YumUtilBase):
                 sys.exit(1)
             if opts.noscripts:
                 self.conf.tsflags.append('noscripts')
-            self._remove_old_dupes()
+            excluded = self._remove_old_dupes()
+            for po, requiredby in excluded.iteritems():
+                count = len(requiredby)
+                print ('Not removing %s because it is required by %s '
+                       'installed package%s' %
+                       (po.hdr.sprintf(opts.qf), count,
+                        's' if count > 1 else ''))
             self.run_with_package_names.add('yum-utils')
 
             if hasattr(self, 'doUtilBuildTransaction'):
@@ -418,9 +451,19 @@ class PackageCleanup(YumUtilBase):
 
             if len(self.tsInfo) < 1:
                 print 'No duplicates to remove'
-                sys.exit(0)
+                errc = 0
+            else:
+                errc = self.doUtilTransaction()
                 
-            sys.exit(self.doUtilTransaction())
+            if excluded:
+                self.logger.warn(
+                    'Warning: Some of the old duplicates were not removed '
+                    'because they are required by installed packages.\n'
+                    'You can try manually removing the new versions instead '
+                    '(run "package-cleanup --dupes" to list them).'
+                )
+
+            sys.exit(errc)
 
     
 if __name__ == '__main__':
